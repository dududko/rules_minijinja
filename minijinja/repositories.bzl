"""Declare runtime dependencies

These are needed for local dev, and users must install them as well.
See https://docs.bazel.build/versions/main/skylark/deploying.html#dependencies
"""

load("@bazel_tools//tools/build_defs/repo:http.bzl", _http_archive = "http_archive")
load("@bazel_tools//tools/build_defs/repo:utils.bzl", "maybe")
load("//minijinja/private:toolchains_repo.bzl", "PLATFORMS", "toolchains_repo")
load("//minijinja/private:versions.bzl", "TOOL_VERSIONS")

def http_archive(name, **kwargs):
    maybe(_http_archive, name = name, **kwargs)

# WARNING: any changes in this function may be BREAKING CHANGES for users
# because we'll fetch a dependency which may be different from one that
# they were previously fetching later in their WORKSPACE setup, and now
# ours took precedence. Such breakages are challenging for users, so any
# changes in this function should be marked as BREAKING in the commit message
# and released only in semver majors.
# This is all fixed by bzlmod, so we just tolerate it for now.
def rules_minijinja_dependencies():
    # The minimal version of bazel_skylib we require
    http_archive(
        name = "bazel_skylib",
        sha256 = "bc283cdfcd526a52c3201279cda4bc298652efa898b10b4db0837dc51652756f",
        urls = [
            "https://github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
            "https://mirror.bazel.build/github.com/bazelbuild/bazel-skylib/releases/download/1.7.1/bazel-skylib-1.7.1.tar.gz",
        ],
    )

########
# Remaining content of the file is only used to support toolchains.
########
_DOC = "Fetch external tools needed for minijinja toolchain"
_ATTRS = {
    "minijinja_version": attr.string(mandatory = True, values = TOOL_VERSIONS.keys()),
    "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
}

def _minijinja_repo_impl(repository_ctx):
    platform = repository_ctx.attr.platform
    version = repository_ctx.attr.minijinja_version

    # Determine file extension based on platform
    extension = ".zip" if "windows" in platform else ".tar.xz"

    # Build the download URL for minijinja-cli
    url = "https://github.com/mitsuhiko/minijinja/releases/download/{0}/minijinja-cli-{1}{2}".format(
        version,
        platform,
        extension,
    )

    # Download and extract the archive
    repository_ctx.download_and_extract(
        url = url,
        sha256 = TOOL_VERSIONS[version][platform],
        stripPrefix = "minijinja-cli-{0}".format(platform),
    )

    # Determine the binary name based on platform
    binary_name = "minijinja-cli.exe" if "windows" in platform else "minijinja-cli"

    build_content = """# Generated by minijinja/repositories.bzl
load("@rules_minijinja//minijinja:toolchain.bzl", "minijinja_toolchain")

exports_files(["{binary_name}"])

minijinja_toolchain(
    name = "minijinja_toolchain",
    target_tool = "{binary_name}",
    visibility = ["//visibility:public"],
)
""".format(binary_name = binary_name)

    # Base BUILD file for this repository
    repository_ctx.file("BUILD.bazel", build_content)

minijinja_repositories = repository_rule(
    _minijinja_repo_impl,
    doc = _DOC,
    attrs = _ATTRS,
)

# Wrapper macro around everything above, this is the primary API
def minijinja_register_toolchains(name, register = True, **kwargs):
    """Convenience macro for users which does typical setup.

    - create a repository for each built-in platform like "minijinja_linux_amd64"
    - TODO: create a convenience repository for the host platform like "minijinja_host"
    - create a repository exposing toolchains for each platform like "minijinja_platforms"
    - register a toolchain pointing at each platform
    Users can avoid this macro and do these steps themselves, if they want more control.
    Args:
        name: base name for all created repos, like "minijinja_1_14"
        register: whether to call through to native.register_toolchains.
            Should be True for WORKSPACE users, but false when used under bzlmod extension
        **kwargs: passed to each minijinja_repositories call
    """
    for platform in PLATFORMS.keys():
        minijinja_repositories(
            name = name + "_" + platform,
            platform = platform,
            **kwargs
        )
        if register:
            native.register_toolchains("@%s_toolchains//:%s_toolchain" % (name, platform))

    toolchains_repo(
        name = name + "_toolchains",
        user_repository_name = name,
    )
